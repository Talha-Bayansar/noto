/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AuthNotesRouteImport } from './routes/_auth/notes/route'
import { Route as AuthNotesIndexImport } from './routes/_auth/notes/index'

// Create/Update Routes

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AuthNotesRouteRoute = AuthNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthNotesIndexRoute = AuthNotesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthNotesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/notes': {
      id: '/_auth/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthNotesRouteImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/notes/': {
      id: '/_auth/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof AuthNotesIndexImport
      parentRoute: typeof AuthNotesRouteImport
    }
  }
}

// Create and export the route tree

interface AuthNotesRouteRouteChildren {
  AuthNotesIndexRoute: typeof AuthNotesIndexRoute
}

const AuthNotesRouteRouteChildren: AuthNotesRouteRouteChildren = {
  AuthNotesIndexRoute: AuthNotesIndexRoute,
}

const AuthNotesRouteRouteWithChildren = AuthNotesRouteRoute._addFileChildren(
  AuthNotesRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthNotesRouteRoute: typeof AuthNotesRouteRouteWithChildren
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthNotesRouteRoute: AuthNotesRouteRouteWithChildren,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/notes': typeof AuthNotesRouteRouteWithChildren
  '/auth': typeof AuthIndexRoute
  '/notes/': typeof AuthNotesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/auth': typeof AuthIndexRoute
  '/notes': typeof AuthNotesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_auth/notes': typeof AuthNotesRouteRouteWithChildren
  '/auth/': typeof AuthIndexRoute
  '/_auth/notes/': typeof AuthNotesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/notes' | '/auth' | '/notes/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/auth' | '/notes'
  id: '__root__' | '/' | '/_auth' | '/_auth/notes' | '/auth/' | '/_auth/notes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/notes"
      ]
    },
    "/_auth/notes": {
      "filePath": "_auth/notes/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/notes/"
      ]
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/_auth/notes/": {
      "filePath": "_auth/notes/index.tsx",
      "parent": "/_auth/notes"
    }
  }
}
ROUTE_MANIFEST_END */
